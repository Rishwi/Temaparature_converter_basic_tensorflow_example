# -*- coding: utf-8 -*-
"""temparature_converter_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1spHs_ekwsVcfhW7hFvr8vNPARv5M_Xbg
"""

import tensorflow as tf
tf.logging.set_verbosity(tf.logging.ERROR)

import numpy as np

celsius_q    = np.array([-40, -10,  0,  8, 15, 22,  38],  dtype=float)           #features
fahrenheit_a = np.array([-40,  14, 32, 46, 59, 72, 100],  dtype=float)           #labels

for i,c in enumerate(celsius_q):
  print("{} degrees Celsius = {} degrees Fahrenheit".format(c, fahrenheit_a[i]))
  
l0 = tf.keras.layers.Dense(units=1, input_shape=[1])                             #creating a dense layer

model = tf.keras.Sequential([l0])                                                #  

model.compile(loss='mean_squared_error',
              optimizer=tf.keras.optimizers.Adam(0.1))                           #Loss function calculates loss% and optimizer optimizes it

history = model.fit(celsius_q, fahrenheit_a, epochs=800, verbose=False)          #fitting the model by passing features, labels, no of iterations, verbose
print("Model training complete...\nResults coming right now... hold your breathe")

import matplotlib.pyplot as plt
plt.xlabel('Epoch Number')
plt.ylabel("Loss Magnitude")
plt.plot(history.history['loss'])                                                #plotting the graph

n=98.0
pred = model.predict([n])                                                        #predicting farenheit value for new data using our trained model
print("predicted value : {}".format(pred))

print("The layer weights are : "+ str(l0.get_weights()))

fcal=n*1.8+32
per=pred*100/fcal
print("Accuracy of the model is {}%".format(per))